{"ast":null,"code":"import { OverlayComponent } from '../overlay/overlay.component';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@angular/common\";\nimport * as i3 from \"../overlay/overlay.component\";\nconst _c0 = function (a0, a1) {\n  return {\n    \"background-color\": a0,\n    \"color\": a1\n  };\n};\nexport class ModalComponent {\n  constructor(http, baseUrl) {\n    this.isOpen = false;\n    this.start = 0;\n    this.amount = 0;\n    this.result = 0;\n    // wasn't sure if you wanted themes or whitelabelling -> could be a class or something cleaner\n    this.headerColor = '#1C110A';\n    this.bodyColor = '#E7E5DF';\n    this.footerColor = '#1C110A';\n    this.headerTextColor = '#FFFFFF';\n    this.bodyTextColor = '#000000';\n    this.footerTextColor = '#FFFFFF';\n    this.baseUrl = baseUrl;\n    this.http = http;\n  }\n  // these realistically don't need to update on blur or at all,\n  // could just get the value from ele on methods below. Think having them update is cleaner\n  // dont care about all update just on blur, could switch if we wanted to run on debounce\n  updateStart(val) {\n    this.start = val;\n  }\n  updateAmount(val) {\n    this.amount = val;\n  }\n  subtract() {\n    var url = this.baseUrl + 'calculator/subtract/' + this.start + '/' + this.amount + '';\n    this.http.get(url).subscribe(result => {\n      this.result = result;\n    }, error => console.error(error));\n  }\n  add() {\n    var url = this.baseUrl + 'calculator/add/' + this.start + '/' + this.amount + '';\n    this.http.get(url).subscribe(result => {\n      this.result = result;\n    }, error => console.error(error));\n  }\n  open() {\n    this.isOpen = !this.isOpen;\n    this.child.toggleOpen();\n  }\n}\nModalComponent.ɵfac = function ModalComponent_Factory(t) {\n  return new (t || ModalComponent)(i0.ɵɵdirectiveInject(i1.HttpClient), i0.ɵɵdirectiveInject('API_URL'));\n};\nModalComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: ModalComponent,\n  selectors: [[\"app-modal\"]],\n  viewQuery: function ModalComponent_Query(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵviewQuery(OverlayComponent, 5);\n    }\n    if (rf & 2) {\n      let _t;\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.child = _t.first);\n    }\n  },\n  decls: 27,\n  vars: 18,\n  consts: [[1, \"app_modal__header\", 3, \"ngStyle\"], [1, \"app_modal__container\", 3, \"ngStyle\"], [1, \"home\"], [1, \"app_modal__container-input\"], [\"for\", \"start\"], [\"type\", \"number\", \"id\", \"start\", 3, \"value\", \"blur\"], [\"start\", \"\"], [\"for\", \"amount\"], [\"type\", \"number\", \"id\", \"amount\", 3, \"value\", \"blur\"], [\"amount\", \"\"], [1, \"app_modal__container-button\", 3, \"click\"], [1, \"app_modal__container-result\"], [1, \"app_modal__footer\", 3, \"ngStyle\"], [3, \"click\"]],\n  template: function ModalComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      const _r2 = i0.ɵɵgetCurrentView();\n      i0.ɵɵelement(0, \"app-overlay\");\n      i0.ɵɵelementStart(1, \"div\")(2, \"div\", 0)(3, \"h1\");\n      i0.ɵɵtext(4, \"Simple Calulator\");\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(5, \"div\", 1)(6, \"p\", 2);\n      i0.ɵɵtext(7, \"Enter two numbers below then click add or subtract\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(8, \"div\", 3)(9, \"label\", 4);\n      i0.ɵɵtext(10, \"Start: \");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(11, \"input\", 5, 6);\n      i0.ɵɵlistener(\"blur\", function ModalComponent_Template_input_blur_11_listener() {\n        i0.ɵɵrestoreView(_r2);\n        const _r0 = i0.ɵɵreference(12);\n        return i0.ɵɵresetView(ctx.updateStart(_r0.value));\n      });\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(13, \"div\", 3)(14, \"label\", 7);\n      i0.ɵɵtext(15, \"Amount: \");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(16, \"input\", 8, 9);\n      i0.ɵɵlistener(\"blur\", function ModalComponent_Template_input_blur_16_listener() {\n        i0.ɵɵrestoreView(_r2);\n        const _r1 = i0.ɵɵreference(17);\n        return i0.ɵɵresetView(ctx.updateAmount(_r1.value));\n      });\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(18, \"button\", 10);\n      i0.ɵɵlistener(\"click\", function ModalComponent_Template_button_click_18_listener() {\n        return ctx.add();\n      });\n      i0.ɵɵtext(19, \"Add\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(20, \"button\", 10);\n      i0.ɵɵlistener(\"click\", function ModalComponent_Template_button_click_20_listener() {\n        return ctx.subtract();\n      });\n      i0.ɵɵtext(21, \"Subtract\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(22, \"h2\", 11);\n      i0.ɵɵtext(23);\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(24, \"div\", 12)(25, \"span\", 13);\n      i0.ɵɵlistener(\"click\", function ModalComponent_Template_span_click_25_listener() {\n        return ctx.open();\n      });\n      i0.ɵɵtext(26, \"Close\");\n      i0.ɵɵelementEnd()()();\n    }\n    if (rf & 2) {\n      const _r0 = i0.ɵɵreference(12);\n      const _r1 = i0.ɵɵreference(17);\n      i0.ɵɵadvance(1);\n      i0.ɵɵclassMapInterpolate1(\"app_modal__modal \", ctx.isOpen ? \"\" : \"app_modal__modal--hidden\", \"\");\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngStyle\", i0.ɵɵpureFunction2(9, _c0, ctx.headerColor, ctx.headerTextColor));\n      i0.ɵɵadvance(3);\n      i0.ɵɵproperty(\"ngStyle\", i0.ɵɵpureFunction2(12, _c0, ctx.bodyColor, ctx.bodyTextColor));\n      i0.ɵɵadvance(6);\n      i0.ɵɵpropertyInterpolate(\"value\", _r0);\n      i0.ɵɵadvance(5);\n      i0.ɵɵpropertyInterpolate(\"value\", _r1);\n      i0.ɵɵadvance(7);\n      i0.ɵɵtextInterpolate(ctx.result);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngStyle\", i0.ɵɵpureFunction2(15, _c0, ctx.footerColor, ctx.footerTextColor));\n    }\n  },\n  dependencies: [i2.NgStyle, i3.OverlayComponent],\n  styles: [\".app_modal__modal[_ngcontent-%COMP%] {\\r\\n  margin: auto;\\r\\n  margin-top: 100px;\\r\\n  border: 2px solid #1C110A;\\r\\n  height: 500px;\\r\\n  width: 500px;\\r\\n  z-index: 10000;\\r\\n  position: fixed;\\r\\n}\\r\\n.app_modal__header[_ngcontent-%COMP%] {\\r\\n  width: 100%;\\r\\n  height: 10%;\\r\\n  color: white;\\r\\n}\\r\\n.app_modal__footer[_ngcontent-%COMP%] {\\r\\n  width: 100%;\\r\\n  height: 10%;\\r\\n}\\r\\n.app_modal__container[_ngcontent-%COMP%] {\\r\\n  width: 100%;\\r\\n  height: 80%;\\r\\n}\\r\\n.app_modal__modal--hidden[_ngcontent-%COMP%] {\\r\\n  display: none;\\r\\n}\\r\\n\\r\\n.app_modal__container-input[_ngcontent-%COMP%]   input[_ngcontent-%COMP%] {\\r\\n  margin: 5px;\\r\\n}\\r\\n\\r\\n.app_modal__container-input[_ngcontent-%COMP%]   label[_ngcontent-%COMP%] {\\r\\n  width: 75px;\\r\\n}\\r\\n\\r\\n.app_modal__container-button[_ngcontent-%COMP%] {\\r\\n  width: 150px;\\r\\n  margin: 15px;\\r\\n}\\r\\n\\r\\n.app_modal__container-result[_ngcontent-%COMP%] {\\r\\n  text-align: center;\\r\\n}\\r\\n\\r\\n\\r\\n@media(max-width: 900px) {\\r\\n  .app_modal__modal[_ngcontent-%COMP%] {\\r\\n    height: 100vh;\\r\\n    width: 100%;\\r\\n    margin: unset;\\r\\n  }\\r\\n\\r\\n  .app_modal__container[_ngcontent-%COMP%] {\\r\\n    padding: 50px;\\r\\n  }\\r\\n\\r\\n  .app_modal__container-result[_ngcontent-%COMP%] {\\r\\n    text-align: left;\\r\\n    padding-left: 50px;\\r\\n  }\\r\\n}\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8uL3NyYy9hcHAvbW9kYWwvbW9kYWwuY29tcG9uZW50LmNzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQ0E7RUFDRSxZQUFZO0VBQ1osaUJBQWlCO0VBQ2pCLHlCQUF5QjtFQUN6QixhQUFhO0VBQ2IsWUFBWTtFQUNaLGNBQWM7RUFDZCxlQUFlO0FBQ2pCO0FBQ0E7RUFDRSxXQUFXO0VBQ1gsV0FBVztFQUNYLFlBQVk7QUFDZDtBQUNBO0VBQ0UsV0FBVztFQUNYLFdBQVc7QUFDYjtBQUNBO0VBQ0UsV0FBVztFQUNYLFdBQVc7QUFDYjtBQUNBO0VBQ0UsYUFBYTtBQUNmOztBQUVBO0VBQ0UsV0FBVztBQUNiOztBQUVBO0VBQ0UsV0FBVztBQUNiOztBQUVBO0VBQ0UsWUFBWTtFQUNaLFlBQVk7QUFDZDs7QUFFQTtFQUNFLGtCQUFrQjtBQUNwQjs7O0FBR0E7RUFDRTtJQUNFLGFBQWE7SUFDYixXQUFXO0lBQ1gsYUFBYTtFQUNmOztFQUVBO0lBQ0UsYUFBYTtFQUNmOztFQUVBO0lBQ0UsZ0JBQWdCO0lBQ2hCLGtCQUFrQjtFQUNwQjtBQUNGIiwic291cmNlc0NvbnRlbnQiOlsiXHJcbi5hcHBfbW9kYWxfX21vZGFsIHtcclxuICBtYXJnaW46IGF1dG87XHJcbiAgbWFyZ2luLXRvcDogMTAwcHg7XHJcbiAgYm9yZGVyOiAycHggc29saWQgIzFDMTEwQTtcclxuICBoZWlnaHQ6IDUwMHB4O1xyXG4gIHdpZHRoOiA1MDBweDtcclxuICB6LWluZGV4OiAxMDAwMDtcclxuICBwb3NpdGlvbjogZml4ZWQ7XHJcbn1cclxuLmFwcF9tb2RhbF9faGVhZGVyIHtcclxuICB3aWR0aDogMTAwJTtcclxuICBoZWlnaHQ6IDEwJTtcclxuICBjb2xvcjogd2hpdGU7XHJcbn1cclxuLmFwcF9tb2RhbF9fZm9vdGVyIHtcclxuICB3aWR0aDogMTAwJTtcclxuICBoZWlnaHQ6IDEwJTtcclxufVxyXG4uYXBwX21vZGFsX19jb250YWluZXIge1xyXG4gIHdpZHRoOiAxMDAlO1xyXG4gIGhlaWdodDogODAlO1xyXG59XHJcbi5hcHBfbW9kYWxfX21vZGFsLS1oaWRkZW4ge1xyXG4gIGRpc3BsYXk6IG5vbmU7XHJcbn1cclxuXHJcbi5hcHBfbW9kYWxfX2NvbnRhaW5lci1pbnB1dCBpbnB1dCB7XHJcbiAgbWFyZ2luOiA1cHg7XHJcbn1cclxuXHJcbi5hcHBfbW9kYWxfX2NvbnRhaW5lci1pbnB1dCBsYWJlbCB7XHJcbiAgd2lkdGg6IDc1cHg7XHJcbn1cclxuXHJcbi5hcHBfbW9kYWxfX2NvbnRhaW5lci1idXR0b24ge1xyXG4gIHdpZHRoOiAxNTBweDtcclxuICBtYXJnaW46IDE1cHg7XHJcbn1cclxuXHJcbi5hcHBfbW9kYWxfX2NvbnRhaW5lci1yZXN1bHQge1xyXG4gIHRleHQtYWxpZ246IGNlbnRlcjtcclxufVxyXG5cclxuXHJcbkBtZWRpYShtYXgtd2lkdGg6IDkwMHB4KSB7XHJcbiAgLmFwcF9tb2RhbF9fbW9kYWwge1xyXG4gICAgaGVpZ2h0OiAxMDB2aDtcclxuICAgIHdpZHRoOiAxMDAlO1xyXG4gICAgbWFyZ2luOiB1bnNldDtcclxuICB9XHJcblxyXG4gIC5hcHBfbW9kYWxfX2NvbnRhaW5lciB7XHJcbiAgICBwYWRkaW5nOiA1MHB4O1xyXG4gIH1cclxuXHJcbiAgLmFwcF9tb2RhbF9fY29udGFpbmVyLXJlc3VsdCB7XHJcbiAgICB0ZXh0LWFsaWduOiBsZWZ0O1xyXG4gICAgcGFkZGluZy1sZWZ0OiA1MHB4O1xyXG4gIH1cclxufVxyXG4iXSwic291cmNlUm9vdCI6IiJ9 */\"]\n});","map":{"version":3,"mappings":"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","names":["OverlayComponent","ModalComponent","constructor","http","baseUrl","updateStart","val","start","updateAmount","amount","subtract","url","get","subscribe","result","error","console","add","open","isOpen","child","toggleOpen","selectors","viewQuery","i0","ctx"],"sourceRoot":"","sources":["C:\\Users\\Jack\\source\\repos\\CalculatorTest\\Calculator.Web\\ClientApp\\src\\app\\modal\\modal.component.ts","C:\\Users\\Jack\\source\\repos\\CalculatorTest\\Calculator.Web\\ClientApp\\src\\app\\modal\\modal.component.html"],"sourcesContent":["import { Component, Inject, ViewChild } from '@angular/core';\r\nimport { OverlayComponent } from '../overlay/overlay.component';\r\nimport { HttpClient } from '@angular/common/http';\r\n\r\n@Component({\r\n  selector: 'app-modal',\r\n  templateUrl: './modal.component.html',\r\n  styleUrls: ['./modal.component.css']\r\n})\r\nexport class ModalComponent {\r\n  @ViewChild(OverlayComponent) child!: OverlayComponent;\r\n  constructor(http: HttpClient, @Inject('API_URL') baseUrl: string) {\r\n    this.baseUrl = baseUrl;\r\n    this.http = http;\r\n  }\r\n  // spent longer than i care messing on with cors. angular/.net are running on differnet ports.\r\n  // added a core rules and set specific ports\r\n  // not too sure why fetch-data the default method can be called on the wrong port - will look into if\r\n  // have more time\r\n  http: HttpClient;\r\n  baseUrl: string;\r\n  isOpen = false;\r\n\r\n  // these realistically don't need to update on blur or at all,\r\n  // could just get the value from ele on methods below. Think having them update is cleaner\r\n  // dont care about all update just on blur, could switch if we wanted to run on debounce\r\n  updateStart(val:string)\r\n  {\r\n    this.start = val as unknown as number;\r\n  }\r\n  updateAmount(val: string) {\r\n    this.amount = val as unknown as number;\r\n  }\r\n  start:number = 0;\r\n  amount:number = 0;\r\n  result = 0;\r\n\r\n  // wasn't sure if you wanted themes or whitelabelling -> could be a class or something cleaner\r\n\r\n  headerColor = '#1C110A';\r\n  bodyColor = '#E7E5DF';\r\n  footerColor = '#1C110A'\r\n\r\n  headerTextColor = '#FFFFFF';\r\n  bodyTextColor = '#000000';\r\n  footerTextColor = '#FFFFFF'\r\n  subtract() {\r\n    var url = this.baseUrl + 'calculator/subtract/' + this.start + '/' + this.amount + '';\r\n    this.http.get<number>(url).subscribe(result => {\r\n      this.result = result;\r\n    }, error => console.error(error));\r\n  };\r\n  add() {\r\n    var url = this.baseUrl + 'calculator/add/' + this.start + '/' + this.amount + '';\r\n    this.http.get<number>(url).subscribe(result => {\r\n      this.result = result;\r\n    }, error => console.error(error));\r\n  };\r\n\r\n  open() {\r\n    this.isOpen = !this.isOpen;\r\n    this.child.toggleOpen();\r\n  }\r\n}\r\n\r\n// i was tempted to put modal at top level, but feel like the spec makes the modal fairly ungeneric\r\n// and could of made it pass in a template and callback etc, but i find that tends to get more\r\n// complicated over time, should be renamed to calculate-modal etc\r\n","<app-overlay></app-overlay> \r\n\r\n<div class=\"app_modal__modal {{isOpen ? '' :  'app_modal__modal--hidden'}}\">\r\n  <div class=\"app_modal__header\" [ngStyle]=\"{'background-color': headerColor, 'color' : headerTextColor}\">\r\n    <h1>Simple Calulator</h1>\r\n  </div>\r\n  <div class=\"app_modal__container\" [ngStyle]=\"{'background-color': bodyColor, 'color' : bodyTextColor}\">\r\n    <p class=\"home\">Enter two numbers below then click add or subtract</p>\r\n\r\n    <div class=\"app_modal__container-input\">\r\n      <label for=\"start\">Start: </label>\r\n      <input type=\"number\" id=\"start\" value=\"{{start}}\" #start (blur)=\"updateStart(start.value)\" />\r\n    </div>\r\n    <div class=\"app_modal__container-input\">\r\n      <label for=\"amount\">Amount: </label>\r\n      <input type=\"number\"  id=\"amount\" value=\"{{amount}}\"  #amount (blur)=\"updateAmount(amount.value)\" />\r\n    </div>\r\n\r\n    <button class=\"app_modal__container-button\" (click)=\"add()\">Add</button>\r\n    <button class=\"app_modal__container-button\" (click)=\"subtract()\">Subtract</button>\r\n\r\n    <h2 class=\"app_modal__container-result\">{{result}}</h2>\r\n\r\n  </div>\r\n  <div class=\"app_modal__footer\" [ngStyle]=\"{'background-color': footerColor, 'color' : footerTextColor}\"><span (click)=\"open()\">Close</span></div>\r\n</div>\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}