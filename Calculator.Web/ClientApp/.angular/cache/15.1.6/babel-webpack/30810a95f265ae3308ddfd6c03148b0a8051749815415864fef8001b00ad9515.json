{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component, ViewChild } from '@angular/core';\nimport { ModalComponent } from '../modal/modal.component';\nlet HomeComponent = class HomeComponent {\n  constructor() {\n    // added defaults for both this and modal - in terms of the app the ones on the modal are probably not needed\n    // but id rather set them incase the modal(calculator) ever got called from something that didn't edit them\n    this.headerColor = '#1C110A';\n    this.bodyColor = '#E7E5DF';\n    this.footerColor = '#1C110A';\n    this.headerTextColor = '#FFFFFF';\n    this.bodyTextColor = '#000000';\n    this.footerTextColor = '#FFFFFF';\n  }\n  // these realistically don't need to update on blur or at all,\n  // could just get the value from ele on methods below. Think having them update is cleaner\n  // dont care about all update just on blur, could switch if we wanted to run on debounce\n  updateHeaderColor(val) {\n    this.headerColor = val;\n  }\n  updateHeaderTextColor(val) {\n    this.headerTextColor = val;\n  }\n  updateBodyColor(val) {\n    this.bodyColor = val;\n  }\n  updateBodyTextColor(val) {\n    this.bodyTextColor = val;\n  }\n  updateFooterColor(val) {\n    this.footerColor = val;\n  }\n  updateFooterTextColor(val) {\n    this.footerTextColor = val;\n  }\n  callModal() {\n    // lazy\n    this.child.headerColor = this.headerColor;\n    this.child.bodyColor = this.bodyColor;\n    this.child.footerColor = this.footerColor;\n    this.child.headerTextColor = this.headerTextColor;\n    this.child.bodyTextColor = this.bodyTextColor;\n    this.child.footerTextColor = this.footerTextColor;\n    this.child.open();\n  }\n};\n__decorate([ViewChild(ModalComponent)], HomeComponent.prototype, \"child\", void 0);\nHomeComponent = __decorate([Component({\n  selector: 'app-home',\n  templateUrl: './home.component.html',\n  styleUrls: ['./home.component.css']\n})], HomeComponent);\nexport { HomeComponent };","map":{"version":3,"mappings":";AAAA,SAASA,SAAS,EAAmCC,SAAS,QAAQ,eAAe;AACrF,SAASC,cAAc,QAAQ,0BAA0B;AAQlD,IAAMC,aAAa,GAAnB,MAAMA,aAAa;EAAnBC;IA2BL;IACA;IACA,gBAAW,GAAW,SAAS;IAC/B,cAAS,GAAW,SAAS;IAC7B,gBAAW,GAAW,SAAS;IAE/B,oBAAe,GAAW,SAAS;IACnC,kBAAa,GAAW,SAAS;IACjC,oBAAe,GAAW,SAAS;EAerC;EA/CI;EACF;EACA;EAEAC,iBAAiB,CAACC,GAAW;IAC3B,IAAI,CAACC,WAAW,GAAGD,GAAG;EACxB;EACAE,qBAAqB,CAAEF,GAAW;IAChC,IAAI,CAACG,eAAe,GAAGH,GAAG;EAC5B;EACAI,eAAe,CAACJ,GAAW;IACzB,IAAI,CAACK,SAAS,GAAGL,GAAG;EACtB;EACAM,mBAAmB,CAACN,GAAW;IAC7B,IAAI,CAACO,aAAa,GAAGP,GAAG;EAC1B;EACAQ,iBAAiB,CAACR,GAAW;IAC3B,IAAI,CAACS,WAAW,GAAGT,GAAG;EACxB;EACAU,qBAAqB,CAACV,GAAW;IAC/B,IAAI,CAACW,eAAe,GAAGX,GAAG;EAC5B;EAaOY,SAAS;IACd;IACA,IAAI,CAACC,KAAK,CAACZ,WAAW,GAAG,IAAI,CAACA,WAAW;IACzC,IAAI,CAACY,KAAK,CAACR,SAAS,GAAG,IAAI,CAACA,SAAS;IACrC,IAAI,CAACQ,KAAK,CAACJ,WAAW,GAAG,IAAI,CAACA,WAAW;IAEzC,IAAI,CAACI,KAAK,CAACV,eAAe,GAAG,IAAI,CAACA,eAAe;IACjD,IAAI,CAACU,KAAK,CAACN,aAAa,GAAG,IAAI,CAACA,aAAa;IAC7C,IAAI,CAACM,KAAK,CAACF,eAAe,GAAG,IAAI,CAACA,eAAe;IAGjD,IAAI,CAACE,KAAK,CAACC,IAAI,EAAE;EACnB;CACD;AAjD4BC,YAA1BpB,SAAS,CAACC,cAAc,CAAC,4CAAwB;AADvCC,aAAa,eALzBH,SAAS,CAAC;EACTsB,QAAQ,EAAE,UAAU;EACpBC,WAAW,EAAE,uBAAuB;EACpCC,SAAS,EAAE,CAAC,sBAAsB;CACnC,CAAC,GACWrB,aAAa,CAkDzB;SAlDYA,aAAa","names":["Component","ViewChild","ModalComponent","HomeComponent","constructor","updateHeaderColor","val","headerColor","updateHeaderTextColor","headerTextColor","updateBodyColor","bodyColor","updateBodyTextColor","bodyTextColor","updateFooterColor","footerColor","updateFooterTextColor","footerTextColor","callModal","child","open","__decorate","selector","templateUrl","styleUrls"],"sourceRoot":"","sources":["C:\\Users\\Jack\\source\\repos\\CalculatorTest\\Calculator.Web\\ClientApp\\src\\app\\home\\home.component.ts"],"sourcesContent":["import { Component, Input, OnChanges, SimpleChanges, ViewChild } from '@angular/core';\r\nimport { ModalComponent } from '../modal/modal.component';\r\n\r\n\r\n@Component({\r\n  selector: 'app-home',\r\n  templateUrl: './home.component.html',\r\n  styleUrls: ['./home.component.css']\r\n})\r\nexport class HomeComponent {\r\n  @ViewChild(ModalComponent) child!: ModalComponent;\r\n\r\n    // these realistically don't need to update on blur or at all,\r\n  // could just get the value from ele on methods below. Think having them update is cleaner\r\n  // dont care about all update just on blur, could switch if we wanted to run on debounce\r\n\r\n  updateHeaderColor(val: string) {\r\n    this.headerColor = val;\r\n  }\r\n  updateHeaderTextColor (val: string) {\r\n    this.headerTextColor = val;\r\n  }\r\n  updateBodyColor(val: string) {\r\n    this.bodyColor = val;\r\n  }\r\n  updateBodyTextColor(val: string) {\r\n    this.bodyTextColor = val;\r\n  }\r\n  updateFooterColor(val: string) {\r\n    this.footerColor = val;\r\n  }\r\n  updateFooterTextColor(val: string) {\r\n    this.footerTextColor = val;\r\n  }\r\n\r\n\r\n  // added defaults for both this and modal - in terms of the app the ones on the modal are probably not needed\r\n  // but id rather set them incase the modal(calculator) ever got called from something that didn't edit them\r\n  headerColor: string = '#1C110A';\r\n  bodyColor: string = '#E7E5DF';\r\n  footerColor: string = '#1C110A'\r\n\r\n  headerTextColor: string = '#FFFFFF';\r\n  bodyTextColor: string = '#000000';\r\n  footerTextColor: string = '#FFFFFF'\r\n\r\n  public callModal() {\r\n    // lazy\r\n    this.child.headerColor = this.headerColor;\r\n    this.child.bodyColor = this.bodyColor;\r\n    this.child.footerColor = this.footerColor;\r\n\r\n    this.child.headerTextColor = this.headerTextColor;\r\n    this.child.bodyTextColor = this.bodyTextColor;\r\n    this.child.footerTextColor = this.footerTextColor;\r\n\r\n\r\n    this.child.open();\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}